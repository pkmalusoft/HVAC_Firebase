@model  HVAC.Models.GRNSaveRequest
@using Newtonsoft.Json
@{
    ViewBag.Title = "Create";
    ViewBag.pTitle = "GRN";
    ViewBag.pageTitle = "GRN";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var _decimal = @Session["Decimal"].ToString();
    int i = 0;
    HVAC.Models.HVACEntities db = new HVAC.Models.HVACEntities();
}


@section styles{
    <link href="~/assets/libs/select2/css/select2.min.css" rel="stylesheet" type="text/css" />
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <!-- Select2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

    <!-- Select2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
}


<style>
    /*select.select2-hidden-accessible {
        display: block !important;
        height: 0;
        padding: 0;
        width: 0;
        position: absolute;
        opacity: 0;
        pointer-events: none;
    }*/
    /* More specific and with !important to override conflicting styles */

    .field-validation-error {
        color: red;
    }

    .input-validation-error {
        border-color: red !important;
    }
</style>


@using (Html.BeginForm("Create", "GRN", FormMethod.Post, new { enctype = "multipart/form-data", @class = "needs-validation ", @novalidate = "novalidate" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div class="card">
        <div class="card-body">
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)


            <input type="hidden" id="Id" name="Id" value="@Model.go.GRNID" />
            <div class="row">
                <div class="col-md-8">
                    <div id="validations" style="color:red;margin-left:7px;display:none">* Please fill mandatory fields!</div>
                </div>
                <div class="col-md-4 text-md-end mb-1">

                    <button type="submit" class="btn btn-success" id="btnsave" tabindex="50">Save</button>

                    <a href='@Url.Action("Index", "GRN", new { id = 0 })' class="btn btn-secondary" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>

                    <div id="divothermenu" class="btn-group hide">
                        @*<button type="submit" class="btn btn-primary">Menu</button>*@
                        <span class="btn btn-primary"><i class="bx bx-cog bx-spin me-2"></i>Sub Menu</span>
                        <button type="button" class="btn btn-primary dropdown-toggle-split border_right" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="mdi mdi-chevron-down"></i>
                        </button>
                        <div class="dropdown-menu" id="divsubmenu">

                            <a class="dropdown-item" target="_blank" href="InvoicePrint?id=@Model.go.GRNID" title="Invoice Printing">Invoice Print</a>

                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    <div class="row">
                        <div class="col-md-6">
                            @Html.HiddenFor(model => model.go.GRNID, new { @class = "form-control" })

                            <label class="col-form-label required"> GRN NO.</label>
                            @Html.TextBoxFor(model => model.go.GRNNO, new { @class = "form-control txttarget", @required = "true", @readonly = "readonly", @tabindex = "1" })
                            @Html.ValidationMessageFor(model => model.go.GRNNO)
                        </div>
                        <div class="col-md-6">
                            <div class="mb-2">
                                <label class="col-form-label">GRN Date</label>
                                <div class="docs-datepicker">
                                    <div class="input-group">
                                        <input type="text" class="form-control docs-date" name="GrnDate" id="GrnDate" data-date-format="dd/MM/yyyy" data-date-autoclose="true" data-provide="datepicker" value="@Model.go.GRNDATE.Value.ToShortDateString()"
                                               placeholder="Pick a date" autocomplete="off" tabindex="2">
                                        <button type="button"
                                                class="btn btn-secondary docs-datepicker-trigger"
                                                disabled>
                                            <i class="mdi mdi-calendar" aria-hidden="true"></i>
                                        </button>
                                    </div>
                                    <div class="docs-datepicker-container"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                        <div class="col-md-2">
                            <label class="col-form-label required ">Supplier</label>

                            <select id="SupplierID" name="SupplierID" class="select2 form-control" required="required"
                                    data-placeholder="Choose Supplier..." tabindex="3">
                            </select>
                            @*@Html.DropDownListFor(model => model.SupplierID, new SelectList(@ViewBag.Supplier, "SupplierID", "SupplierName"), "Select", new { @class = "form-select", @required = "true" })*@
                            @Html.ValidationMessageFor(model => model.go.SUPPLIERID)
                        </div>
                        <div class="col-md-3">
                            <label class="col-form-label">PO No.</label>
                            <div class="input-group gap-3">
                                <select id="PURCHASEORDERID" name="PURCHASEORDERID" class="select2 form-control" required="required"
                                        data-placeholder="Choose Purchase Order No." tabindex="4"></select>
                                <button type="button" class="btn btn-sm btn-success" id="btnShowEquipment" style="" tabindex="5"> <i class="mdi mdi-refresh" style="font-size: 18px;"></i></button>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <label class="col-form-label required ">Employee Name</label>

                            <select id="EmployeeID" name="EmployeeID" class="select2 form-control" required="required"
                                    data-placeholder="Choose EmployeeName..." tabindex="6">
                            </select>
                            @*@Html.DropDownListFor(model => model.SupplierID, new SelectList(@ViewBag.Supplier, "SupplierID", "SupplierName"), "Select", new { @class = "form-select", @required = "true" })*@
                            @Html.ValidationMessageFor(model => model.go.EmployeeID)
                        </div>
                        <div class="col-md-2">
                            <label class="col-form-label">Remarks</label>

                            @Html.TextBoxFor(model => model.go.Remarks, new { @class = "form-control", @tabindex = "7" })
                        </div>

                    </div>

        </div>

    </div>

    <div class="card">
        <div class="card-body">
            <div class="row">
                
               
           
                        @*<div class="row">
                            <div class="col-md-12">


                                <div class="row">

                                    <div class="col-md-2">
                                        <label class="col-form-label required">EquipmentType</label>
                                        <input type="text" id="EquipmentName" class="form-control" placeholder="Type Equipment..." tabindex="8" />
                                        <input type="hidden" id="EquipmentID" name="EquipmentID" />
                                    </div>

                                    <div class="col-md-2">
                                        <label class="col-form-label">Model</label>
                                        <input type="text" id="GtxtModel" class="form-control form-control-sm" placeholder="Enter Model" required tabindex="9" />
                                        <span id="modelError" class="text-danger small"></span>

                                    </div>
                                    <div class="col-md-1">
                                        <label class="col-form-label" id="lblQty">Qty</label>
                                        <input type="text" id="GtxtQty" value="1" class="form-control form-control-sm textright" placeholder="Enter Qty" required tabindex="10" />
                                        <span id="qtyError" class="text-danger small"></span>

                                    </div>

                                    <div class="col-md-1">
                                        <label class="col-form-label">Unit Price</label>
                                        <input type="text" id="GtxtUnitPrice" value="" class="form-control form-control-sm textrightamount" placeholder="Enter Unit Price" tabindex="11" />
                                    </div>
                                    <div class="col-md-2">
                                        <label class="col-form-label">Value</label>
                                        <input type="hidden" id="GtxtExRate" value="" readonly class="textrightamount form-control form-control-sm" placeholder="Value" />
                                        <input type="text" id="GtxtValue" value="" readonly class="textrightamount form-control form-control-sm" placeholder="Value" tabindex="12" />
                                        <input type="hidden" id="GtxtFValue" value="" readonly class="textrightamount form-control form-control-sm" placeholder="Value" />
                                        <input type="hidden" id="GtxtLValue" value="" readonly class="textright form-control form-control-sm" placeholder="Value" />
                                    </div>
                                    <div class="col-md-2">

                                        <button type="button" class="btn btn-success waves-effect waves-light filter" style="margin-top:37px;" id="btnAddGRNDetails" title="Insert into Grid" tabindex="13">
                                            <i class="dripicons-enter" style="font-size: 18px;"></i>
                                        </button>
                                        <button type="button" class="btn btn-danger waves-effect waves-light" style="margin-top:37px;" id="btnClearForm" title="Clear Form" tabindex="14">
                                            <i class="mdi mdi-refresh"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>*@
                      
                        <div class="row">
                            <div class="col-md-12" id="GRNContainer">
                                @{Html.RenderPartial("DetailList", Model);}
                            </div>
                        </div>
                    </div>

                </div>


            </div>
       
    <input type="hidden" value="" id="hdnHidden" />

}

<!-- Equipment Modal -->
<div class="modal fade bs-example-modal-xl" id="equipmentModal" tabindex="-1" aria-labelledby="equipmentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="equipmentModalLabel">Purchase Order Equipment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="equipmentmodalcontainer">
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="btnAddSelectedEquipment">Add Selected to GRN</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@section scripts{
    <script src="~/assets/libs/select2/js/select2.min.js"></script>
    <script src="~/Scripts/JS/GRN.js"></script>
    <script type="text/javascript">

         
          var masterDropDownList = @Html.Raw(Json.Encode(Model.masterDropdowns ?? new HVAC.Models.GRMTextVM()));    
            var goModel = @Html.Raw(JsonConvert.SerializeObject(Model.go));


        $(document).ready(function () {
            var hdnid = $('#go_GRNID').val();
            if (hdnid > 0)
            {
                let empTerm = new Option(masterDropDownList.EmployeeText, goModel.EmployeeID, true, true);
                $('#EmployeeID').append(empTerm).trigger('change');

                let purchaseTerm = new Option(masterDropDownList.PurchaseOrderText, goModel.PURCHASEORDERID, true, true);
                $('#PURCHASEORDERID').append(purchaseTerm).trigger('change');

                let Supp = new Option(masterDropDownList.SupplierText, goModel.SupplierID, true, true);
                $('#SupplierID').append(Supp).trigger('change');
            }

            // Set EmployeeID to logged-in user and make readonly
            var loggedInEmployeeID = '@ViewBag.LoggedInEmployeeID';
            var loggedInEmployeeName = '@ViewBag.LoggedInEmployeeName';
            if (loggedInEmployeeID && loggedInEmployeeID !== '0') {
                var empOption = new Option(loggedInEmployeeName, loggedInEmployeeID, true, true);
                $('#EmployeeID').append(empOption).trigger('change');
                $('#EmployeeID').prop('disabled', true); // Make it readonly
            }

            $('#GrnDate').datepicker({
                dateFormat: 'dd-mm-yy',
                changeMonth: true,
                changeYear: true
            }).on('changeDate', function (e) {
                $(this).datepicker('hide');
            });

            //var grnDetailsArray = grnOrderList || [];
            //renderGRNDetailsTable();

            //$('#btnAddGRNDetails').click(function () {
            //    var editIndex = $("#hdnHidden").val();
            //    if (editIndex != '') {
            //        grnDetailsArray[editIndex].EquipmentTypeID = $('#EquipmentName').val();
            //        grnDetailsArray[editIndex].Model = $('#GtxtModel').val();
            //        grnDetailsArray[editIndex].Qty = parseInt($('#GtxtQty').val());
            //        grnDetailsArray[editIndex].UnitPrice = $('#GtxtUnitPrice').val();
            //        grnDetailsArray[editIndex].Value = $('#GtxtValue').val();
            //    } else {
            //        var data = {
            //            EquipmentTypeID: $('#EquipmentName').val(),
            //            Model: $('#GtxtModel').val(),
            //            Qty: parseInt($('#GtxtQty').val()),
            //            UnitPrice: $('#GtxtUnitPrice').val(),
            //            Value: $('#GtxtValue').val(),
            //        };
            //        grnDetailsArray.push(data);
            //    }

            //    renderGRNDetailsTable();
            //    clearFormGrnDetails();

            //});

            function calculateValue() {
                let unitPrice = parseFloat($('#GtxtUnitPrice').val()) || 0;
                let qty = parseFloat($('#GtxtQty').val()) || 0;
                let value = unitPrice * qty;

                $('#GtxtValue').val(value.toFixed(2));
                $('#GtxtFValue').val(value.toFixed(2)); // If needed for internal logic
                $('#GtxtLValue').val(value.toFixed(2));
            }
            $('#GtxtUnitPrice, #GtxtQty').on('input', calculateValue);


            function renderGRNDetailsTable() {
                var tableBody = $('#GRNDetailsTables tbody');
                tableBody.empty(); // Clear previous rows

                $.each(grnDetailsArray, function (index, item) {
                    var row = $('<tr index="' + index + '">');
                    row.append($('<td>').text(item.EquipmentTypeID));
                    row.append($('<td>').text(item.Model));
                    row.append($('<td>').text(item.Qty));
                    row.append($('<td>').text(item.UnitPrice));
                    row.append($('<td>').text(item.Value));

                    row.append('<td>' +
                        '<a onclick="EditGRNDetailEntry(' + index + ')" href="javascript:void(0);" title="Edit Item" class="edit-btn text-success"><i class="mdi mdi-pencil font-size-18"></i></a>' +
                        '<a onclick="DeleteGRNDetailEntry(' + index + ')" href="javascript:void(0);" title="Delete Item" class="text-danger"><i class="mdi mdi-delete font-size-18"></i></a>')
                    tableBody.append(row);

                });
            }

            window.EditGRNDetailEntry = function (index) {
                $('#EquipmentName').val(grnDetailsArray[index].EquipmentTypeID);
                $('#GtxtModel').val(grnDetailsArray[index].Model);
                $('#GtxtQty').val(parseInt(grnDetailsArray[index].Qty));
                $('#GtxtUnitPrice').val(grnDetailsArray[index].UnitPrice);
                $('#GtxtValue').val(grnDetailsArray[index].Value);
                $("#hdnHidden").val(index);
            }

            window.DeleteGRNDetailEntry = function (index) {
                grnDetailsArray.splice(index, 1); // Remove item from array
                renderGRNDetailsTable();
            }
            function clearFormGrnDetails() {
                $('#EquipmentName').val('').trigger('change');
                $('#GtxtModel').val('');
                $('#GtxtQty').val('1');
                $('#GtxtUnitPrice').val('');
                $('#GtxtValue').val('');
            }

            $('#btnClearForm').click(function () {
                $('#EquipmentName').val('');
                $('#GtxtModel').val('');
                $('#GtxtQty').val('1');
                $('#GtxtUnitPrice').val('');
                $('#GtxtValue').val('');
                $("#hdnHidden").val('');
            });

            function clearall() {
                    $('#GRNNO').val(''),
                    $('#GrnDate').val(''),
                    $("#SupplierID").val('').trigger('change'),
                    $('#PURCHASEORDERID').val('').trigger('change'),
                    $("#Remarks").val(''),
                    $("#EmployeeID").val('').trigger('change'),
                    grnDetailsArray = [];
                clearFormGrnDetails();
                renderGRNDetailsTable();


            }

            @*function saveGRN() {
                debugger;
                var GRN = {
                    GRNID: $('#go_GRNID').val(),
                    GRNNO: $('#go_GRNNO').val(),
                    GRNDATE: $('#GrnDate').val(),
                    SupplierID: $("#SupplierID").val(),
                    PURCHASEORDERID: $('#PURCHASEORDERID').val(),
                    EmployeeID: $("#EmployeeID").val(),
                    Remarks: $("#go_Remarks").val()
                };

                 $.ajax({
                     url: '@Url.Action("SaveGRN", "GRN")',
                     type: 'POST',
                     contentType: 'application/json; charset=utf-8',
                     data: JSON.stringify({
                         go: GRN,
                         gRNDetails : grnDetailsArray
                     }),
                     success: function (response) {
                         if (response.success) {
                             Swal.fire({
                                 title: "Success!",
                                 text: response.message || "Data saved successfully.",
                                 icon: "success",
                                 confirmButtonColor: "#34c38f"
                             }).then(function () {
                                 // Redirect to Index page after success message is acknowledged
                                 window.location.href = '/GRN/Index'; // Change this path if needed
                             });
                         } else {
                             Swal.fire({
                                 title: "Error!",
                                 text: response.message || "There was an error saving the data.",
                                 icon: "error",
                                 confirmButtonColor: "#f46a6a"
                             });
                         }

                         clearall();
                         console.log(response);
                     },
                     error: function (xhr, status, error) {
                         alert('Error saving data');
                         console.error(xhr.responseText);
                     }
                 });
            }

            $('#btnsave').click(function () {
                saveGRN();
            });*@



            $('#SupplierID').select2({
                placeholder: 'Select a Supplier',
                allowClear: false,
                minLength: 1,
                ajax: {
                    url: '/Supplier/GetSupplierName',
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        return {
                            term: params.term
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: data.map(function (item) {
                                return { id: item.SupplierID, text: item.SupplierName };
                            })
                        };
                    },
                    cache: true
                }
            });

            $('#EmployeeID').select2({
                placeholder: 'Select an Employee',
                allowClear: false,
                minimumInputLength: 1,
                ajax: {
                    url: '/GRN/GetEmployeeName',
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        return {
                            term: params.term
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: data.map(function (item) {
                                return {
                                    id: item.ID,
                                    text: item.TermsText
                                };
                            })
                        };
                    },
                    cache: true
                }
            });

            // Initially disable PURCHASEORDERID
            $('#PURCHASEORDERID').prop('disabled', true);

            $('#PURCHASEORDERID').select2({
                placeholder: 'Select Purchase Order ID',
                allowClear: true,
                minimumInputLength: 1,
                ajax: {
                    url: '/GRN/GetPurchaseOrderID',
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        var supplierId = $('#SupplierID').val();
                        if (!supplierId) {
                            // If no supplier selected, don't send request
                            return false;
                        }
                        return {
                            term: params.term,
                            supplierId: supplierId
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: data.map(function (item) {
                                return {
                                    id: item.ID,
                                    text: item.TermsText
                                };
                            })
                        };
                    },
                    cache: true
                }
            });

        
            $('#EquipmentName').autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/PurchaseOrder/GetEquipmentType",
                        data: { term: request.term },
                        dataType: "json",
                        type: "GET",
                        success: function (data) {
                            response($.map(data, function (val, i) {
                                return {
                                    label: val.EquipmentName,
                                    value: val.EquipmentName,
                                    id: val.ID
                                };
                            }));
                        }
                    });
                },
                minLength: 1,
                autoFocus: true,
                select: function (event, ui) {
                    $('#EquipmentName').val(ui.item.label);   // show name in textbox
                    $('#EquipmentID').val(ui.item.id);        // store ID in hidden field
                    return false;
                },
                focus: function (event, ui) {
                    $('#EquipmentName').val(ui.item.label);
                    return false;
                }
            });

        
            // Check/uncheck all checkboxes
            $(document).on('change', '#checkAllEquipment', function() {
                $('.equipment-checkbox').prop('checked', this.checked);
            });

            // Add selected equipment to GRN grid
            $('#btnAddSelectedEquipment').click(function () {
                var equipmentList = $('#equipmentModal').data('equipmentList') || [];
                var selectedIndexes = [];
                $('#equipmentTable tbody .equipment-checkbox:checked').each(function () {
                    selectedIndexes.push(parseInt($(this).attr('data-index')));
                });
                if (selectedIndexes.length === 0) {
                    Swal.fire('Please select at least one equipment to add.');
                    return;
                }
                // Add selected equipment to grnDetailsArray
                selectedIndexes.forEach(function(idx) {
                    var item = equipmentList[idx];
                    // Prevent duplicates (by Equipment, Model, etc. as needed)
                    if (!grnDetailsArray.some(function(e) {
                        return e.Equipment === item.Equipment && e.Model === item.Model;
                    })) {
                        grnDetailsArray.push({
                            EquipmentTypeID: item.Equipment, // Adjust if you want to use ID
                            Model: item.Model,
                            Qty: item.Qty,
                            UnitPrice: item.UnitPrice,
                            Value: item.Value,
                            Remarks: item.Remarks
                        });
                    }
                });
                renderGRNDetailsTable();
                var modal = bootstrap.Modal.getInstance(document.getElementById('equipmentModal'));
                modal.hide();
            });

        });

    </script>
}


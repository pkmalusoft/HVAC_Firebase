@model HVAC.Models.CurrencyVM

@{
    ViewBag.Title = "Create";
    ViewBag.pTitle = "Currency";
    ViewBag.pageTitle = "Setup";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>

    .searchdiv {
        background-color: #fff;
        width: 100%;
        margin: 0 auto;
        max-width: 600px;
        padding: 20px;
        margin-top: 50px;
        border-radius: 10px;
        box-shadow: 0 9px 23px rgba(0, 0, 0, 0.09), 0 5px 5px rgba(0, 0, 0, 0.06) !important;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {

        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });

        $("#CurrencyName").focus();
    $('#CountryName').autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "@Url.Action("GetCountryList", "CountryMaster")",
                    data: { SearchText: request.term },
                    dataType: "json",
                    type: "GET",
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.CountryName,
                                value: val.CountryName
                            }
                        }))
                    }
                });
            },
            minLength: 1,
            autoFocus: false,
            select: function (event, ui) {
                event.preventDefault();
                $('#CountryName').val(ui.item.label);
                return false;
            },
            focus: function (event, ui) {
                $('#CountryName').val(ui.item.label);

                return false;
            }
        });
        $("#btnsave").click(function () {





            var curr = $("#CurrencyName").val();
            var sym = $("#Symbol").val();
            var noof = $("#NoOfDecimals").val();
            var mon = $("#MonetaryUnit").val();
            var cou = $("#CountryID option:selected").val();

            $("#alert1").hide();
            $("#alert2").hide();
            $("#validations").hide();


            if (curr == "") {

                $("#validations").show();
                return false;
            }
            else if (sym == "") {
                $("#validations").show();
                return false;
            }
            else if (noof == "") {
                $("#validations").show();
                return false;
            }
            else if (mon == "") {
                $("#validations").show();
                return false;
            }
            else if (cou == "") {
                $("#validations").show();
                return false;
            }
            else if (flag == 1) {
                $("#validations").hide();
                $("#alert1").show();
                return false;
            }
            else if (isexist == 1 && $("#StatusBaseCurrency").is(':checked')) {
                $("#alert2").show();
                return false;
            }
            else {
                $("#validations").hide();
                $("#alert1").hide();
                return true;
            }
        });


        $("#CurrencyName").blur(function () {
            var total;
            var flg;
            $.ajax({
                type: "GET",
                url: "/Currency/GetCurrencyName",
                datatype: "Json",
                data: { name: $('#CurrencyName').val() },
                success: function (data) {
                    if (data.flag == 0) {
                        flag = 0;
                    }
                    else if (data.flag == 1) {
                        flag = 1;
                    }
                }

            });
        });
        var isexist = 0;

        $("#StatusBaseCurrency").click(function () {

                $.ajax({
                    type: "POST",
                    url: "/Currency/CheckBaseCurrency",
                    datatype: "Json",
                    success: function (data) {
                        if (data.x == 1) {
                            isexist = 1;
                        }
                        else if (data.x == 0) {
                            isexist = 0;
                        }

                    }
                });


        });



    });

</script>

@using (Html.BeginForm("Create", "Currency", FormMethod.Post, new { @class = "needs-validation ", @novalidate = "novalidate", @id = "quickAWB" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <div id="validations" style="color:red;margin-left:7px;display:none">* Please fill mandatory fields</div>
    <div id="alert1" style="color:red;display:none;margin-left:10px;">*Currency Already Exist</div>
    <div id="alert2" style="color:red;display:none;margin-left:10px;">*Can not Create Base Currency. It is Already Exist</div>


    <div class="searchdiv">

        <div class="row">
            <div class="col-md-4">
                <div class="mb-2">
                    <label class="col-form-label required">Currency Name</label>
                    @Html.TextBoxFor(model => model.CurrencyName, new { @class = "form-control", @required = "required" })
                    @Html.ValidationMessageFor(model => model.CurrencyName)

                </div>
            </div>
            <div class="col-md-4">
                <div class="mb-2">
                    <label class="col-form-label required">Currency Code</label>
                    @Html.TextBoxFor(model => model.CurrencyCode, new { @class = "form-control", @required = "required" })
                    @Html.ValidationMessageFor(model => model.CurrencyCode)

                </div>
            </div>
            <div class="col-md-4">
                <div class="mb-2">
                    <label class="col-form-label required">Symbol</label>
                    @Html.TextBoxFor(model => model.Symbol, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Symbol)
                </div>
            </div>

            <div class="col-md-4">
                <div class="mb-2">
                    <label class="col-form-label required">No. Of Decimals</label>
                    @Html.TextBoxFor(model => model.NoOfDecimals, new { @class = "form-control", @required = "required" })
                    @Html.ValidationMessageFor(model => model.NoOfDecimals)

                </div>
            </div>

            <div class="col-md-4">
                <div class="mb-2">
                    <label class="col-form-label required">Exchange Rate</label>
                    @Html.TextBoxFor(model => model.ExchangeRate, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ExchangeRate)

                </div>
            </div>

            <div class="col-md-4">
                <div class="mb-2">
                    <label class="col-form-label required">Monetary Unit</label>
                    @Html.TextBoxFor(model => model.MonetaryUnit, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MonetaryUnit)
                </div>
            </div>


            <div class="col-md-4">
                <div class="mb-2">
                    <label class="col-form-label required">Country</label>
                    @Html.TextBoxFor(model => model.CountryName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CountryName)
                </div>
            </div>
            <div class="col-md-4">
                <div class="mb-2">
                    <label class="col-form-label">Number Format</label>
                    @Html.DropDownListFor(model => model.NumberFormat, ViewBag.transtypes as SelectList, new { @class = "form-select" })
                    @Html.ValidationMessageFor(model => model.NumberFormat)
                    @Html.HiddenFor(model => model.NumberFormat)
                    <div class="invalid-feedback">
                        Select Number Format
                    </div>
                </div>
            </div>
            <div class="col-md-4 checkboxdesign btn_top">
                <div class="mb-2 mt-2">
                    @Html.CheckBox("StatusBaseCurrency", new { @name = "StatusBaseCurrency" })&nbsp;&nbsp;  <label class="col-form-label">Status Base Currency</label>
                    @Html.ValidationMessageFor(model => model.StatusBaseCurrency)
                </div>
            </div>


            <div class="col-md-12 text-md-end mt-2">
                <input type="submit" value="Save" class="btn btn-success" data-toggle="tooltip" title="Click here" id="btnsave" />



                <a href='@Url.Action("Index", "Currency", new { id = 0 })' class="btn btn-secondary" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>

            </div>
        </div>
    </div>
}

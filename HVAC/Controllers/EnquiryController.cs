using Amazon;
using Amazon.Runtime;
using Amazon.S3;
using Amazon.S3.Model;
using Amazon.S3.Transfer;
using ClosedXML.Excel;
using DocumentFormat.OpenXml.EMMA;
using DocumentFormat.OpenXml.Office.CoverPageProps;
using DocumentFormat.OpenXml.Office2010.Excel;
using DocumentFormat.OpenXml.Spreadsheet;
using HVAC.DAL;
using HVAC.Models;
using iTextSharp.text;
using iTextSharp.text.pdf;
using Newtonsoft.Json;
using Rotativa;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Entity;
using System.IO;
using System.Linq;
using System.Text;
 
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using System.Web.UI;
using System.Xml;

namespace HVAC.Controllers
{
    [SessionExpireFilter]
    public class EnquiryController : Controller
    {

        HVACEntities db = new HVACEntities();

        private const string keyName = "updatedtestfile.txt";
        private const string filePath = null;
        private static readonly string bucketName = ConfigurationManager.AppSettings["BucketName"];
        private static readonly RegionEndpoint bucketRegion = RegionEndpoint.USWest1;
        private static readonly string wasabiurl = ConfigurationManager.AppSettings["wasabiurl"];

        private static readonly string accesskey = ConfigurationManager.AppSettings["AWSAccessKey"];
        private static readonly string secretkey = ConfigurationManager.AppSettings["AWSSecretKey"];
        private static readonly string wasabiurl1 = ConfigurationManager.AppSettings["wasabiurl1"];

        private static IAmazonS3 _s3Client;
        // GET: Enquiry
        [OutputCache(Duration = 180, VaryByParam = "none")]
        public ActionResult Index()
        {
            try
            {
                EnquirySearch obj = (EnquirySearch)Session["EnquirySearch"];
                EnquirySearch model = new EnquirySearch();
                int branchid = Session["CurrentBranchID"] != null ? Convert.ToInt32(Session["CurrentBranchID"].ToString()) : 0;
                int yearid = Session["fyearid"] != null ? Convert.ToInt32(Session["fyearid"].ToString()) : 0;
                int userid = Session["UserID"] != null ? Convert.ToInt32(Session["UserID"].ToString()) : 0;
                int RoleID = Session["UserRoleID"] != null ? Convert.ToInt32(Session["UserRoleID"].ToString()) : 0;
            int employeeId = 0;
            var useremployee = db.EmployeeMasters.Where(cc => cc.UserID == userid).FirstOrDefault();
            employeeId = useremployee.EmployeeID;
            if (obj == null)
            {
                DateTime pFromDate;
                DateTime pToDate;
                //int pStatusId = 0;
                pFromDate = CommonFunctions.GetFirstDayofMonth().Date;
                pToDate = CommonFunctions.GetLastDayofMonth().Date;
                pFromDate = GeneralDAO.CheckParamDate(pFromDate, yearid).Date;
                pToDate = GeneralDAO.CheckParamDate(pToDate, yearid).Date;
                obj = new EnquirySearch();
                obj.FromDate = pFromDate;
                obj.ToDate = pToDate;
                obj.EnquiryNo = "";
                Session["EnquirySearch"] = obj;
                model.FromDate = pFromDate;
                model.ToDate = pToDate;
                model.EnquiryNo = "";
            }
            else
            {
                model = obj;
                model.FromDate = GeneralDAO.CheckParamDate(obj.FromDate, yearid).Date;
                model.ToDate = GeneralDAO.CheckParamDate(obj.ToDate, yearid).Date;
            }
                List<EnquiryVM> lst = EnquiryDAO.EnquiryList(model.FromDate, model.ToDate, model.EnquiryNo, yearid, employeeId, RoleID);
                model.Details = lst;

                return View(model);
            }
            catch (Exception ex)
            {
                // Log the exception (implement logging framework)
                ModelState.AddModelError("", "An error occurred while loading enquiries. Please try again.");
                return View(new EnquirySearch());
            }
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Index(EnquirySearch obj)
        {
            if (ModelState.IsValid)
            {
                Session["EnquirySearch"] = obj;
                return RedirectToAction("Index");
            }
            return View(obj);
        }


        #region "Create Page"

        public ActionResult Create(int id = 0)
        {
            int fyearid = Session["fyearid"] != null ? Convert.ToInt32(Session["fyearid"].ToString()) : 0;
            int BranchID = Session["CurrentBranchID"] != null ? Convert.ToInt32(Session["CurrentBranchID"].ToString()) : 0;

            var _Enquiryautogenerated = db.AcCompanies.FirstOrDefault().IsAWBAutoGenrated;

            ViewBag.EnquiryAuto = _Enquiryautogenerated;
            ViewBag.EnquirySources = db.EnquirySources.OrderBy(cc => cc.EnquirySourceName).ToList();
            ViewBag.EnquiryStages = db.EnquiryStages.OrderBy(cc => cc.EnqStageName).ToList();
            ViewBag.EnquiryStatus = db.EnquiryStatus.OrderBy(cc => cc.EnqStatusName).ToList();
            ViewBag.EnquiryStatus1 = (from c in db.EnquiryStatus select new SelectListItem { Value = c.EnqStatusID.ToString(), Text = c.EnqStatusName }).ToList();
            //ViewBag.EntityTypes = db.EntityTypes.OrderBy(cc => cc.EntityTypeName).ToList();
            ViewBag.Priorities = db.Priorities.OrderBy(cc => cc.PriorityName).ToList();
            ViewBag.AssignedStatus = db.AssignedStatus.ToList();
            ViewBag.BuildingTypes = db.BuildingTypes.OrderBy(cc => cc.BldgTypeName).ToList();
            ViewBag.Verticals = db.Verticals.OrderBy(cc => cc.VerticalName).ToList();
            //ViewBag.employee = db.EmployeeMasters.OrderBy(cc => cc.FirstName).ToList();
            //ViewBag.roles = db.RoleMasters.ToList();
            //ViewBag.Brand = db.Brands.OrderBy(cc => cc.BrandName).ToList();
            ViewBag.EnquiryType = db.EnquiryTypes.ToList();

            List<Quotation> quotationlist = new List<Quotation>();

            int branchid = Convert.ToInt32(Session["CurrentBranchID"].ToString());
            ViewBag.UserRoleId = Convert.ToInt32(Session["UserRoleID"].ToString());
            EnquiryVM obj = new EnquiryVM();
            ViewBag.DueDate = CommonFunctions.GetCurrentDateTime();
            if (id == 0)
            {
                ViewBag.Title = "Create";
                if (_Enquiryautogenerated == true)
                {
                    var ENo = EnquiryDAO.GetMaxEnquiryNo(branchid, fyearid, id);
                    obj.EnquiryNo = ENo;
                }
                else
                {
                    obj.EnquiryNo = "";
                }
                obj.EnquiryDate = CommonFunctions.GetCurrentDateTime();
                obj.DueDate = CommonFunctions.GetCurrentDateTime().AddDays(30).Date;
                TimeSpan difference = obj.DueDate - obj.EnquiryDate;
                int daysDifference = difference.Days;
                obj.DueDays = daysDifference;
                obj.EnquiryStatusID = 4;
                obj.EnquiryStatus = db.EnquiryStatus.Where(cc => cc.EnqStatusID == 4).FirstOrDefault().EnqStatusName;
                obj.ClientDetails = new List<EnquiryClientVM>();
                obj.EmployeeDetails = new List<EnquiryEmployeeVM>();
                obj.AuditLogDetails = new List<AuditLogVM>();
                obj.EquipmentDetails = new List<EnquiryEquipmentVM>();
                obj.QuotationDetails = new List<QuotationVM>();
                obj.DocumentDetails = new List<DocumentMasterVM>();
                obj.EnquiryTypeID = 1;
            }
            else
            {
                ViewBag.Title = "Modify";

                Enquiry model = db.Enquiries.Find(id);
                obj.EnquiryID = model.EnquiryID;
                obj.EnquiryNo = model.EnquiryNo;
                obj.EnquiryDate = model.EnquiryDate;
                obj.DueDate = model.DueDate;
                obj.DueDays = model.DueDays;
                obj.EntityTypeIDs = model.EntityTypeIDs;
                obj.ProjectName = model.ProjectName;
                obj.ProjectDescription = model.ProjectDescription;
                obj.ProjectPrefix = model.ProjectPrefix;
                obj.EnquiryStageID = model.EnquiryStageID;
                obj.EnquiryStatusID = model.EnquiryStatusID;
                obj.EnquiryStatus = db.EnquiryStatus.Where(cc => cc.EnqStatusID == model.EnquiryStatusID).FirstOrDefault().EnqStatusName;
                obj.EnquirySourceID = model.EnquirySourceID;
                obj.AssignedEmployees = model.AssignedEmployees;
                obj.BuildingTypeID = model.BuildingTypeID;
                obj.CountryID = model.CountryID;
                obj.CityID = model.CityID;
                obj.DueDate = model.DueDate;
                obj.VerticalsID = model.VerticalsID;
                obj.PriorityID = model.PriorityID;
                obj.BuildingTypeID = model.BuildingTypeID;
                // Optimize N+1 queries by using single query with joins
                var city = db.CityMasters.FirstOrDefault(c => c.CityID == obj.CityID);
                var country = db.CountryMasters.FirstOrDefault(c => c.CountryID == obj.CountryID);
                obj.CityName = city?.City ?? "";
                obj.CountryName = country?.CountryName ?? "";
                obj.EnquiryTypeID = model.EnquiryTypeID;
                if (model.ClientID > 0)
                {
                    var _client = db.ClientMasters.FirstOrDefault(c => c.ClientID == model.ClientID);
                    obj.ClientID = model.ClientID;
                    obj.ClientName = _client?.ClientName ?? "";
                }

                if (model.JobHandOverID != null)
                {

                    var _jobid = Convert.ToInt32(model.JobHandOverID);
                    obj.JobHandOverID = _jobid;
                    var _job = db.JobHandovers.Find(_jobid);
                    if (_job != null)
                    {
                        obj.ProjectNumber = _job.ProjectNumber;
                    }
                }
                else
                {
                    obj.JobHandOverID = 0;
                }

                obj.ClientDetails = new List<EnquiryClientVM>();
                obj.EmployeeDetails = new List<EnquiryEmployeeVM>();
                obj.AuditLogDetails = new List<AuditLogVM>();
                obj.EquipmentDetails = new List<EnquiryEquipmentVM>();
                obj.QuotationDetails = new List<QuotationVM>();
                obj.DocumentDetails = new List<DocumentMasterVM>();
                obj.QuotationDetails = EnquiryDAO.EnquiryQuotation(obj.EnquiryID);
                if (obj.QuotationDetails != null)
                    obj.SecuredQuoteCount = obj.QuotationDetails.Where(cc => cc.QuotationStatus == "Secured").Count();
                else
                    obj.SecuredQuoteCount = 0;

                //obj.ClientDetails = EnquiryDAO.EnquiryClient(obj.EnquiryID);
                //obj.EmployeeDetails = EnquiryDAO.EnquiryEmployee(obj.EnquiryID);
                //obj.EquipmentDetails = EnquiryDAO.EnquiryEquipment(obj.EnquiryID);
                //obj.QuotationDetails = EnquiryDAO.EnquiryQuotation(obj.EnquiryID);

                //obj.DocumentDetails = EnquiryDAO.GetEnquiryDocument(obj.EnquiryID);
                //obj.AuditLogDetails = EnquiryDAO.EnquiryLog(obj.EnquiryNo);
            }

            return View(obj);
        }



        [HttpPost]
        public JsonResult SaveEnquiry(EnquiryVM ProType, string Details)
        {
            int _fyearid = Convert.ToInt32(Session["fyearid"].ToString());
            int _userid = Convert.ToInt32(Session["UserID"].ToString());
            int _branchid = Convert.ToInt32(Session["CurrentBranchID"].ToString());
            var _Enquiryautogenerated = db.AcCompanies.FirstOrDefault().IsAWBAutoGenrated;
            try
            {
                //checing duplicate
                var _enquiryexist = db.Enquiries.Where(cc => cc.EnquiryNo == ProType.EnquiryNo && cc.EnquiryID!=ProType.EnquiryID && cc.IsDeleted == false).FirstOrDefault();
                if (_enquiryexist != null)
                {
                    return Json(new { status = "Failed", EnquiryID = 0, message = "Enquiry No. already Exists!" });

                }
                Enquiry _enquiry = new Enquiry();
                if (ProType.EnquiryID == 0)
                {
                    if (_Enquiryautogenerated == true)
                    {
                        var ENo = EnquiryDAO.GetMaxEnquiryNo(_branchid, _fyearid, 0);
                        _enquiry.EnquiryNo = ENo;
                    }
                    else
                    {
                        _enquiry.EnquiryNo = ProType.EnquiryNo;
                    }                   
                   
                    
                    _enquiry.ClientID = ProType.ClientID;
                    _enquiry.EnquiryStatusID = 4; //default to unassigned status
                }
                else
                {
                    _enquiry = db.Enquiries.Find(ProType.EnquiryID);
                }

                _enquiry.ProjectName = ProType.ProjectName;
                _enquiry.ProjectDescription = ProType.ProjectDescription;
                _enquiry.EnquiryDate = ProType.EnquiryDate;
                _enquiry.DueDate = ProType.DueDate;
                _enquiry.DueDays = ProType.DueDays;
                _enquiry.EnquiryStageID = ProType.EnquiryStageID;
                _enquiry.EnquirySourceID = ProType.EnquirySourceID;
                //_enquiry.AssignedEmployees = ProType.AssignedEmployees;                
                _enquiry.PriorityID = ProType.PriorityID;
                _enquiry.VerticalsID = ProType.VerticalsID;
                _enquiry.EntityTypeIDs = ProType.EntityTypeIDs;

                _enquiry.BuildingTypeID = ProType.BuildingTypeID;
                _enquiry.CountryID = CheckCountryName(ProType.CountryName);
                _enquiry.CityID = CheckCityName(ProType.CityName, _enquiry.CountryID);

                _enquiry.ProjectPrefix = ProType.ProjectPrefix;
                _enquiry.EnquiryTypeID = ProType.EnquiryTypeID;
                if (ProType.EnquiryID == 0)
                {
                    _enquiry.CreatedBy = _userid;
                    _enquiry.CreatedDate = CommonFunctions.GetBranchDateTime();
                    _enquiry.BranchID = _branchid;
                    _enquiry.UpdatedBy = _userid;
                    _enquiry.UpdatedDate = CommonFunctions.GetBranchDateTime();
                    _enquiry.AcFinancialYearID = _fyearid;
                    db.Enquiries.Add(_enquiry);
                    db.SaveChanges();


                    EnquiryClient _client = new EnquiryClient();
                    _client.ClientID = ProType.ClientID;
                    _client.EnquiryID = _enquiry.EnquiryID;
                    _client.CreatedBy = _userid;
                    _client.CreatedDate = CommonFunctions.GetBranchDateTime();

                    db.EnquiryClients.Add(_client);
                    db.SaveChanges();

                    GeneralDAO.SaveAuditLog("Enquiry Created", _enquiry.EnquiryNo, "Enquiry");

                }
                else
                {
                    _enquiry.UpdatedBy = _userid;
                    _enquiry.UpdatedDate = CommonFunctions.GetBranchDateTime();
                    db.Entry(_enquiry).State = EntityState.Modified;
                    db.SaveChanges();

                    GeneralDAO.SaveAuditLog("Enquiry Updated", _enquiry.EnquiryNo, "Enquiry");
                }


                ////enquiry client update
                //#region "enquiryclient"
                //if (Details != "")
                //{
                //    var IDetails = JsonConvert.DeserializeObject<List<EnquiryClientVM>>(Details);

                //    foreach (var detail in IDetails)
                //    {
                //        if (detail.Deleted == false)
                //        {

                //            var _client = db.EnquiryClients.Where(cc => cc.ClientID == detail.ClientID && cc.EnquiryID == _enquiry.EnquiryID).FirstOrDefault();
                //            if (_client == null)
                //            {
                //                EnquiryClient det = new EnquiryClient();
                //                det.ClientID = detail.ClientID;
                //                det.CreatedBy = _userid;
                //                det.CreatedDate = CommonFunctions.GetBranchDateTime();
                //                det.ClientType = detail.ClientType;
                //                det.EnquiryID = _enquiry.EnquiryID;
                //                db.EnquiryClients.Add(det);
                //                db.SaveChanges();
                //            }
                //        }
                //        else
                //        {
                //            var _client = db.EnquiryClients.Where(cc => cc.ClientID == detail.ClientID && cc.EnquiryID == _enquiry.EnquiryID).FirstOrDefault();
                //            if (_client != null)
                //            {
                //                db.EnquiryClients.Remove(_client);
                //                db.SaveChanges();
                //            }
                //        }
                //    }
                //}
                //#endregion

                return Json(new { status = "OK", EnquiryID = _enquiry.EnquiryID, message = "Enquiry Saved Succesfully!" });

            }
            catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);

                        return Json(new { status = "Failed", EnquiryID = 0, message = message });
                    }
                }
                throw raise;
            }
        }
        
        [HttpPost]
        public JsonResult SaveEnquiryStatus(string StatusID,string StatusName, int EnquiryID,string Reason)
        {
            
            
            int fyearid = Convert.ToInt32(Session["fyearid"].ToString());
            int userid = Convert.ToInt32(Session["UserID"].ToString());
            var _enquiry = db.Enquiries.Find(EnquiryID);
            _enquiry.EnquiryStatusID = Convert.ToInt32(StatusID);
            _enquiry.UpdatedBy = userid;
            _enquiry.UpdatedDate = CommonFunctions.GetBranchDateTime();

            db.Entry(_enquiry).State = EntityState.Modified;
            db.SaveChanges();
            GeneralDAO.SaveAuditLog("Status Changed to " +  StatusName + "," + Reason,_enquiry.EnquiryNo, "Enquiry Status");
            return Json(new { Status = "ok", Message = "Client Deleted" }, JsonRequestBehavior.AllowGet);                        
            
        }

        [HttpPost]
        public JsonResult GetDueDays(DateTime EnquiryDate, DateTime DueDate)
        {
            try
            {
                TimeSpan difference = DueDate - EnquiryDate;
                int daysDifference = difference.Days;
                return Json(new { status = "OK", Days = daysDifference, message = "Days Get!" });


            }
            catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
            {
                return Json(new { status = "Failed", Days = 0, message = dbEx.Message });
            }
        }


        //delete enquiry  items
        public JsonResult ConfirmJob(int id)
        {
            int _fyearid = Convert.ToInt32(Session["fyearid"].ToString());
            int _userid = Convert.ToInt32(Session["UserID"].ToString());
            int _branchid = Convert.ToInt32(Session["CurrentBranchID"].ToString());
            var _enquiry = db.Enquiries.Find(id);
            var _enquiryno = _enquiry.EnquiryNo;

            if (id != 0)
            {
                StatusModel v = EnquiryDAO.GenerateJobConfirm(_branchid, _fyearid, id, _userid);
                GeneralDAO.SaveAuditLog("Enquiry Confirmed", _enquiry.EnquiryNo, "Enquiry Status");
                if (v.Status == "OK")
                    return Json(new { status = "OK", message = v.Message });
                else
                {
                    return Json(new { status = "Failed", message = v.Message });
                }
            }
            else
            {
                return Json(new { status = "Failed", message = "Process Failed!" });

            }
        }
        //delete enquiry  items
        public JsonResult DeleteConfirmed(int id)
        {
            string status = "";
            string message = "";
            //int k = 0;
            if (id != 0)
            {

                var _enquiry = db.Enquiries.Find(id);
                if (_enquiry != null)
                {
                    _enquiry.IsDeleted = true;
                    db.Entry(_enquiry).State = EntityState.Modified;
                    db.SaveChanges();
                    return Json(new { status = "OK", message = "Enquiry Deleted Successfully!" });

                }
                else
                {
                    return Json(new { status = "Failed", message = "Delete Failed!" });
                }
            }
            else
            {
                return Json(new { status = "Failed", message = "Delete Failed!" });

            }


        }

        #endregion



        #region dropdown
        [HttpGet]
        public JsonResult GetMasterDataList(string MasterName, string term)
        {
            int fyearid = Convert.ToInt32(Session["fyearid"].ToString());
            List<DropdownVM> objList = new List<DropdownVM>();
            objList = EnquiryDAO.GetDropdownData(MasterName, term);
            return Json(new { Status = "ok", data = objList }, JsonRequestBehavior.AllowGet);


        }

        //[HttpGet]
        //public JsonResult GetMasterDataList(string MasterName, string term)
        //{
        //    int fyearid = Convert.ToInt32(Session["fyearid"].ToString());
        //    List<DropdownVM> objList = new List<DropdownVM>();
        //    objList = EnquiryDAO.GetDropdownData(MasterName, term);
        //    return Json(new { Status = "ok", data = objList }, JsonRequestBehavior.AllowGet);


        //}
        #endregion

        #region SaveEngineer
        [HttpPost]
        public JsonResult SaveEnquiryEmployee(EnquiryEmployeeVM data)
        {

            int fyearid = Convert.ToInt32(Session["fyearid"].ToString());
            int UserID = Convert.ToInt32(Session["UserID"].ToString());
            string UserName = Session["UserName"].ToString();
            EnquiryEmployee model = new EnquiryEmployee();
            var _enquiryemp = db.EnquiryEmployees.Where(cc => cc.EnquiryID == data.EnquiryID && cc.EmployeeID == data.EmployeeID).FirstOrDefault();
            if (_enquiryemp != null)
            {
                return Json(new { status = "Failed", message = "Engineer already assigned!" });
            }
            if (data.ID == 0)
            {
                model = new EnquiryEmployee();
                model.EmployeeID = data.EmployeeID;
                model.EnquiryID = data.EnquiryID;
                model.CreatedDate = CommonFunctions.GetBranchDateTime();
                model.CreatedBy = UserID;
                model.EmployeeShortName = "TV";
                db.EnquiryEmployees.Add(model);
                db.SaveChanges();


                //Enquiry status and assigned employees checking
                var _enquiry = db.Enquiries.Find(data.EnquiryID);

                var _emps = db.EnquiryEmployees.Where(cc => cc.EnquiryID == data.EnquiryID).ToList();
                string AssignedEmployees = "";
                foreach(var _emp in _emps)
                {
                    if (AssignedEmployees == "")
                    {
                        AssignedEmployees = _emp.EmployeeID.ToString();
                    }
                    else
                    {
                        AssignedEmployees = AssignedEmployees + "," + _emp.EmployeeID.ToString();
                    }

                }
                if (AssignedEmployees != "" )
                {
                    if (_enquiry.EnquiryStatusID == 4)//unassigned;
                    {
                        _enquiry.EnquiryStatusID = 5; //make it assigned

                    }
                    _enquiry.AssignedEmployees = AssignedEmployees;
                }
                else
                {
                    _enquiry.EnquiryStatusID = 4;
                }

                db.Entry(_enquiry).State = EntityState.Modified;
                db.SaveChanges();

                int transactionId = Convert.ToInt32(data.EnquiryID);
                string JobNo = data.EnquiryNo;
                string ProjectTitle = "E";
                string type = "New Task";
                string title = "Job Assigned!";
                string msg = "New Enquiry " + data.EnquiryNo + "is Assigned ";
                var _notificationDAO = new NotificationDAO();
                int notificationId = _notificationDAO.SaveNotification(UserID, data.EnquiryID, type, title, msg);

                string remarks = "Engineer Assigned ";
                GeneralDAO.SaveAuditLog(remarks, data.EnquiryNo, "Enquiry-Client");
                return Json(new { status = "OK", message = "Engineer Assigned Succesfully!" });
            }
            else
            {
                model = db.EnquiryEmployees.Find(data.ID);
                model.EmployeeID = data.EmployeeID;
                model.EnquiryID = data.EnquiryID;
                db.Entry(model).State = EntityState.Modified;
                db.SaveChanges();
                return Json(new { status = "OK", message = "Engineer updated Succesfully!" });
            }

        }
        [HttpPost]
        public JsonResult DeleteEmployeeEnquiry(int ID,string EnquiryNo)
        {
            int EnquiryID = 0;
            int EmployeeID = 0;
            int fyearid = Convert.ToInt32(Session["fyearid"].ToString());
            EnquiryEmployee obj = db.EnquiryEmployees.Find(ID);

            EnquiryID = Convert.ToInt32(obj.EnquiryID);
            EmployeeID = Convert.ToInt32(obj.EmployeeID);

            var _Quotation = db.Quotations.Where(cc => cc.EnquiryID == EnquiryID && cc.EngineerID == EmployeeID).FirstOrDefault();

            if (_Quotation == null)
            {
                db.EnquiryEmployees.Remove(obj);
                db.SaveChanges();

                var _emps = db.EnquiryEmployees.Where(cc => cc.EnquiryID == EnquiryID).ToList();
                string AssignedEmployees = "";
                foreach (var _emp in _emps)
                {
                    if (AssignedEmployees == "")
                    {
                        AssignedEmployees = _emp.EmployeeID.ToString();
                    }
                    else
                    {
                        AssignedEmployees = AssignedEmployees + "," + _emp.EmployeeID.ToString();
                    }

                }
                var _enquiry = db.Enquiries.Find(EnquiryID);
                _enquiry.AssignedEmployees = AssignedEmployees;
                db.Entry(_enquiry).State = EntityState.Modified;
                db.SaveChanges();

                string remarks = "Engineer Un-Assigned ";
                GeneralDAO.SaveAuditLog(remarks, EnquiryNo, "Enquiry-Engineer");                
                return Json(new { Status = "ok", Message = "Employee Unassigned" }, JsonRequestBehavior.AllowGet);
            }
            else
            {

                EnquiryVM vm = new EnquiryVM();
                List<EnquiryEmployeeVM> List = new List<EnquiryEmployeeVM>();
                List = EnquiryDAO.EnquiryEmployee(EnquiryID);

                vm.EmployeeDetails = List;
                vm.Status = "OK";

                return Json(new { Status = "Failed", Message = "Engineer could not un-assign!" }, JsonRequestBehavior.AllowGet);
            }
        }


        // Load Quotations dynamically
        public ActionResult GetQuotations(int employeeid)
        {
            // dummy data
            var orders = new List<QuotationVM>();
            var Quotation = new QuotationVM();
            Quotation.QuotationNo = "1000";
            orders.Add(Quotation);

            return PartialView("_QuotationsPartial", orders);
        }

        [HttpPost]
        public ActionResult ShowEngineer(int EnquiryID)
        {
            EnquiryVM vm = new EnquiryVM();
            vm.EmployeeDetails = EnquiryDAO.EnquiryEmployee(EnquiryID);
            return PartialView("AssignedEmployees", vm);
        }


        #endregion
        #region partialview
        [HttpPost]
        public JsonResult SaveEnquiryClient(EnquiryClientVM data)
        {

            int fyearid = Convert.ToInt32(Session["fyearid"].ToString());
            int UserID = Convert.ToInt32(Session["UserID"].ToString());
            string UserName = Session["UserName"].ToString();
            EnquiryClient model = new EnquiryClient();
            if (data.EnquiryClientID == 0)
            {
                model = db.EnquiryClients.Where(cc => cc.ClientID == data.ClientID && cc.EnquiryID == data.EnquiryID).FirstOrDefault();
                if (model == null)
                {
                    model = new EnquiryClient();
                    model.ClientID = data.ClientID;
                    model.ClientType = data.ClientType;
                    model.EnquiryID = data.EnquiryID;
                    model.CreatedDate = CommonFunctions.GetBranchDateTime();
                    model.CreatedBy = UserID;
                    db.EnquiryClients.Add(model);
                    db.SaveChanges();

                    if (data.ClientType == "Client")
                    {
                        var _enquiry = db.Enquiries.Find(data.EnquiryID);
                        _enquiry.ClientID = Convert.ToInt32(data.ClientID);
                        db.Entry(_enquiry).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                    string remarks = data.ClientType + " Added ";
                    GeneralDAO.SaveAuditLog(remarks, data.EnquiryNo, "Enquiry-Client");
                    return Json(new { status = "OK", message = "Client Added Succesfully!" });
                }
                else
                  {
                    return Json(new { status = "Failed", message = "Client already Exists!" });
                }
            }
            else
            {
                model = db.EnquiryClients.Where(cc => cc.ClientID == data.ClientID && cc.EnquiryID == data.EnquiryID && cc.EnquiryClientID!=model.EnquiryClientID).FirstOrDefault();
                model = db.EnquiryClients.Find(data.EnquiryClientID);
                model.ClientID = data.ClientID;
                model.ClientType = data.ClientType;
                db.Entry(model).State = EntityState.Modified;
                db.SaveChanges();
                return Json(new { status = "OK", message = "Client updated Succesfully!" });
            }

        }


        [HttpPost]
        public JsonResult DeleteEnquiryClient(int ID, string EnquiryNo)
        {
            int EnquiryID = 0;
            int ClientID = 0;
            int fyearid = Convert.ToInt32(Session["fyearid"].ToString());
            EnquiryClient obj = db.EnquiryClients.Find(ID);

            EnquiryID = Convert.ToInt32(obj.EnquiryID);

            ClientID = Convert.ToInt32(obj.ClientID);
            if (obj.ClientType == "Client")
            {                
                    var _enquiry = db.Enquiries.Find(EnquiryID);
                    _enquiry.ClientID = -1;
                    db.Entry(_enquiry).State = EntityState.Modified;
                    db.SaveChanges();
                
            }
            var _Quotation = db.Quotations.Where(cc => cc.EnquiryID == EnquiryID).FirstOrDefault();

            if (_Quotation != null)
            {
                var Quotationto = _Quotation.QuotationTo;
                if (!Quotationto.Contains(ClientID.ToString()))
                {
                    db.EnquiryClients.Remove(obj);
                    db.SaveChanges();
                    GeneralDAO.SaveAuditLog("Client Deleted", EnquiryNo, "Enquiry");
                    return Json(new { Status = "ok", Message = "Client Deleted" }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { Status = "Failed", Message = "Client Could not delete" }, JsonRequestBehavior.AllowGet);
                }
            }
        else
        {
            db.EnquiryClients.Remove(obj);
                    db.SaveChanges();
                    GeneralDAO.SaveAuditLog("Client Deleted", EnquiryNo, "Enquiry");
                    return Json(new { Status = "ok", Message = "Client Deleted" }, JsonRequestBehavior.AllowGet);

        }
    }
        [HttpPost]
        public ActionResult ShowClientList(int EnquiryID)
        {
            EnquiryVM vm = new EnquiryVM();
            vm.ClientDetails = EnquiryDAO.EnquiryClient(EnquiryID);
            return PartialView("ClientList", vm);
        }
        [HttpPost]
        public ActionResult ShowClientEntry(string FieldName)
        {
            ClientVM vm = new ClientVM();
            return PartialView("ClientEntry", vm);
        }

        [HttpGet]
        public JsonResult GetClientDetail(int Id)
        {
            ClientVM vm = new ClientVM();
            var _client = db.ClientMasters.Find(Id);
            if (_client != null)
            {
                vm.ClientID = _client.ClientID;
                vm.ClientName = _client.ClientName;
                vm.ClientType = _client.ClientType;

            }
            return Json(new { Status = "ok", data = vm }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult SaveClientEntry(ClientVM model)
        {
            int UserID = Convert.ToInt32(Session["UserID"].ToString());

            var cust = (from c in db.ClientMasters where c.ClientName.Trim().ToLower() == model.ClientName.Trim().ToLower() && c.ClientType == model.ClientType select c).FirstOrDefault();
            if (cust != null)
            {
                model.ClientID = cust.ClientID;
                return Json(new { data = model, message = "Client already Exist", status = "Failed" }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                int uid = Convert.ToInt32(Session["UserID"].ToString());
                ClientMaster vm1 = new ClientMaster();
                vm1.ClientName = model.ClientName;
                vm1.Address1 = model.Address1;
                vm1.Address2 = model.Address2;
                vm1.Address3 = model.Address3;
                vm1.LocationName = model.LocationName;
                vm1.ContactName = model.ContactName;
                vm1.CityID = model.CityID;
                vm1.CountryID = model.CountryID;
                vm1.ClientType = model.ClientType;
                vm1.ContactNo = model.ContactNo;
                vm1.Email = model.Email;
                vm1.ClientPrefix = model.ClientPrefix;
                
                db.ClientMasters.Add(vm1);
                db.SaveChanges();

                //new client adding to enquiry
                var model1 = new EnquiryClient();
                model1.ClientID = model.ClientID;
                model1.ClientType = model.ClientType;
                model1.EnquiryID = model.EnquiryID;
                model1.CreatedDate = CommonFunctions.GetBranchDateTime();
                model1.CreatedBy = UserID;
                db.EnquiryClients.Add(model1);
                db.SaveChanges();

                string remarks = model.ClientType + " Added ";
                GeneralDAO.SaveAuditLog(remarks, model.EnquiryNo, "Enquiry-Client");
                return Json(new { status = "OK", message = "Client Added Succesfully!" });

                return Json(new { data = vm1, message = "Client Saved Successfully", status = "Ok" }, JsonRequestBehavior.AllowGet);
            }





        }

        [HttpGet]
        public JsonResult GetClientName(string term, string ClientType = "")
        {
            int branchid = Convert.ToInt32(Session["CurrentBranchID"].ToString());

            if (term == null)
                term = "";
            if (term.Trim() != "")
            {

                var customerlist = (from c1 in db.ClientMasters
                                    where c1.ClientName.ToLower().StartsWith(term.ToLower())
                                   // && c1.ClientType.Contains(ClientType)
                                    orderby c1.ClientName ascending
                                    select new { ClientID = c1.ClientID, ClientName = c1.ClientName + "(" + c1.ClientType + ")" }).ToList();

                return Json(customerlist, JsonRequestBehavior.AllowGet);

            }
            else
            {

                var customerlist = (from c1 in db.ClientMasters
                                    //where c1.ClientType.Contains(ClientType)
                                    orderby c1.ClientName ascending
                                    select new { ClientID = c1.ClientID, ClientName = c1.ClientName + "(" + c1.ClientType + ")" }).ToList();

                return Json(customerlist, JsonRequestBehavior.AllowGet);

            }




        }

        #endregion

      
      
        #region "document"

        [HttpPost]
        public ActionResult ShowDocumentEntry(int id, int EnquiryID)
        {
            var enquiry = db.Enquiries.Find(EnquiryID);
            DocumentMasterVM vm = new DocumentMasterVM();
            if (enquiry != null)
            {
                vm.EnquiryID = enquiry.EnquiryID;

            }
            else
            {
                vm.EnquiryID = 0;
            }
            if (id > 0)
            {
                DocumentMaster model = db.DocumentMasters.Find(id);
                vm.EnquiryID = model.EnquiryID;
                vm.DocumentID = model.DocumentID;
                vm.DocumentTitle = model.DocumentTitle;
                vm.FileName = model.FileName;
                vm.DocumentTypeID = model.DocumentTypeID;
            }
            else
            {

                vm.DocumentID = 0;
                vm.DocumentTitle = "";
                vm.FileName = "";
            }
            ViewBag.DocumentTypes = db.DocumentTypes.ToList();
            return PartialView("Document", vm);
        }
        public ActionResult Document()
        {
            ViewBag.DocumentTypes = db.DocumentTypes.ToList();
            return View();
        }
        //public ActionResult Document()
        //{
        //    //var enquiry = db.Enquiries.Find(EnquiryID);
        //    //List<DocumentMasterVM> List = new List<DocumentMasterVM>();

        //    //EnquiryDocumentVM vm = new EnquiryDocumentVM();
        //    //if (enquiry != null)
        //    //{
        //    //    vm.EnquiryID = enquiry.EnquiryID;

        //    //}
        //    //else
        //    //{
        //    //    vm.EnquiryID = 0;
        //    //}
        //    //if (id > 0)
        //    //{
        //    //    EnquiryDocument model = db.EnquiryDocuments.Find(id);
        //    //    vm.EnquiryID = model.EnquiryID;
        //    //    vm.EnquiryDocumentID = model.EnquiryDocumentID;
        //    //    vm.DocumentName = model.DocumentName;
        //    //    vm.DocumentPath = model.DocumentPath;
        //    //}
        //    //else
        //    //{

        //    //    vm.EnquiryDocumentID = 0;
        //    //    vm.DocumentName = "";
        //    //    vm.DocumentPath = "";
        //    //}
        //    ViewBag.DocumentTypes = db.DocumentTypes.ToList();
        //    return View();
        //}

        [HttpPost]
        public ActionResult ListDocument(int id)
        {
            EnquiryVM vm = new EnquiryVM();
            List<DocumentMasterVM> List = new List<DocumentMasterVM>();
            List = EnquiryDAO.GetEnquiryDocument(id);
            vm.DocumentDetails = List;
            return PartialView("DocumentList", vm);
        }
        public async Task<string> UploadFile(string objName, string pathAndFileName)
        {
            try
            {
                // 1. this is necessary for the endpoint
                //var config = new AmazonS3Config { ServiceURL = "https://s3.us-west-1.wasabisys.com/truebook/courier" };
                var config = new AmazonS3Config { ServiceURL = wasabiurl };
                // this will allow you to call whatever profile you have
                //var credentials = new StoredProfileAWSCredentials("truebook");
                var credentials = new BasicAWSCredentials(accesskey, secretkey);
                _s3Client = new AmazonS3Client(credentials, config);
                var obj = $"{objName}";
                var path = $"{pathAndFileName}";
                var putRequest = new PutObjectRequest();
                putRequest.BucketName = bucketName;
                putRequest.Key = objName;
                putRequest.FilePath = pathAndFileName;

                putRequest.Metadata.Add("x-amz-meta-title", "someTitle");
                await _s3Client.PutObjectAsync(putRequest);
                return "OK";
            }
            catch (AmazonS3Exception ex)
            {
                return ex.Message;
            }
        }
        [HttpPost]
        public async Task<ActionResult> UploadFiles()
        {
            string fname = "";
            string filename = "";
            // Checking no of files injected in Request object  
            if (Request.Files.Count > 0)
            {
                try
                {
                    //  Get all files from Request object  
                    HttpFileCollectionBase files = Request.Files;
                    for (int i = 0; i < files.Count; i++)
                    {
                        //string path = AppDomain.CurrentDomain.BaseDirectory + "Uploads/";  
                        //string filename = Path.GetFileName(Request.Files[i].FileName);  

                        HttpPostedFileBase file = files[i];


                        // Checking for Internet Explorer  
                        if (Request.Browser.Browser.ToUpper() == "IE" || Request.Browser.Browser.ToUpper() == "INTERNETEXPLORER")
                        {
                            string[] testfiles = file.FileName.Split(new char[] { '\\' });
                            fname = testfiles[testfiles.Length - 1];
                            filename = file.FileName;
                        }
                        else
                        {
                            fname = file.FileName;
                            filename = file.FileName;
                        }
                        Random rnd = new Random();
                        int num = rnd.Next();
                        fname = fname.Replace(" ", "_");
                        fname = "f" + num.ToString() + "_" + fname;
                        filename = fname;
                        // Get the complete folder path and store the file inside it.  
                        fname = Path.Combine(Server.MapPath("~/UploadDocuments/"), fname);
                        file.SaveAs(fname);
                        var result = await UploadFile(filename, fname);
                        if (result == "OK")
                            return Json(new { status = "ok", FileName = filename, message = "File Uploaded Successfully!" });
                        else
                            return Json(new { status = "Failed", FileName = "", message = "Upload Failed." });
                    }
                    return Json(new { status = "Failed", FileName = "", message = "No files selected." });
                }
                catch (Exception ex)
                {
                    return Json(new { status = "Failed", FileName = "", message = ex.Message });
                    //return Json("Error occurred. Error details: " + ex.Message);
                }
            }
            else
            {
                return Json(new { status = "Failed", FileName = "", message = "No files selected." });
            }
        }
        public List<DocumentMasterVM> BindDocument(int id)
        {
            List<DocumentMasterVM> List = new List<DocumentMasterVM>();
            List = JobDAO.GetJOBDocument(0, id);
            return List;

        }

        //[HttpPost]
        //public JsonResult EditDocument(int id)
        //{
        //    DocumentMasterVM vm = new DocumentMasterVM();
        //    ViewBag.DocumentTypes = db.DocumentTypes.ToList();
        //    var item = db.DocumentMasters.Find(id);
        //    if (item != null)
        //    {
        //        vm.DocumentID = item.DocumentID;
        //        vm.DocumentTypeID = item.DocumentTypeID;
        //        vm.DocumentTitle = item.DocumentTitle;
        //        vm.Filename = item.FileName;
        //    }
        //    else
        //    {
        //        item = new DocumentMaster();
        //        vm.DocumentID = 0;
        //        vm.DocumentTitle = "";
        //        vm.DocumentTypeID = 0;
        //        vm.Filename = "";
        //    }
        //    return Json(new { status = "OK", data = vm });

        //}
        [HttpPost]
        public ActionResult DeleteDocument(int DocumentId, int EnquiryID)
        {
            int fyearid = Convert.ToInt32(Session["fyearid"].ToString());

            DocumentMaster obj = db.DocumentMasters.Find(DocumentId);
            db.DocumentMasters.Remove(obj);
            db.SaveChanges();
            EnquiryVM vm = new EnquiryVM();
            List<DocumentMasterVM> List = new List<DocumentMasterVM>();
            List = EnquiryDAO.GetEnquiryDocument(EnquiryID);
            vm.DocumentDetails = List;
            return PartialView("DocumentList", vm);
        }

        [HttpPost]
        public JsonResult SaveDocument(int DocumentID, int EnquiryID, int DocumentTypeID, string DocumentTitle,string DocumentLink , string Filename)
        {

            DocumentMasterVM DocumentMasterdata = new DocumentMasterVM();
            DocumentMasterdata.DocumentID = DocumentID;
            DocumentMasterdata.DocumentTypeID = DocumentTypeID;
            DocumentMasterdata.Filename = Filename;
            DocumentMasterdata.EnquiryID = EnquiryID;
            DocumentMasterdata.DocumentTitle = DocumentTitle;
            DocumentMasterdata.DocumentLink = DocumentLink;
            int fyearid = Convert.ToInt32(Session["fyearid"].ToString());
            int UserID = Convert.ToInt32(Session["UserID"].ToString());

            DocumentMaster model = new DocumentMaster();
            if (DocumentMasterdata.DocumentID == 0)
            {
                model = new DocumentMaster();
            }
            else
            {
                model = db.DocumentMasters.Find(DocumentMasterdata.DocumentID);
            }
            model.DocumentTypeID = DocumentMasterdata.DocumentTypeID;
            model.DocumentTitle = DocumentMasterdata.DocumentTitle;
            model.FileName = DocumentMasterdata.Filename;
            model.DocumentLink = DocumentMasterdata.DocumentLink;
            if (DocumentMasterdata.DocumentID == 0)
            {
                model.CreatedBy = UserID;
                model.CreatedDate = CommonFunctions.GetCurrentDateTime();
                model.EnquiryID = DocumentMasterdata.EnquiryID;
                db.DocumentMasters.Add(model);
                db.SaveChanges();
                return Json(new { status = "OK", message = "Document Added Succesfully!" });
            }
            else
            {
                model.ModifiedDate = CommonFunctions.GetCurrentDateTime();
                model.ModifiedBy = UserID;
                db.Entry(model).State = System.Data.Entity.EntityState.Modified;
                db.SaveChanges();
                return Json(new { status = "OK", message = "Document updated Succesfully!" });
            }



        }
        #endregion

        #region "equipment"
        [HttpPost]
        public ActionResult ShowEquipmentEntry(int id, int EnquiryID)
        {
            var enquiry = db.Enquiries.Find(EnquiryID);
            EnquiryEquipmentVM vm = new EnquiryEquipmentVM();
            if (enquiry != null)
            {
                vm.EnquiryID = enquiry.EnquiryID;

            }
            else
            {
                vm.EnquiryID = 0;
            }
            if (id > 0)
            {
                Equipment model = db.Equipments.Find(id);
                vm.EnquiryID = model.EnquiryID;
                vm.ProductFamilyID = model.ProductFamilyID;
                vm.EquipmentTypeID = model.EquipmentTypeID;
                vm.EquipmentName = model.EquipmentName;
                vm.Brand = model.Brand;
                vm.Model = model.Model;
                vm.UnitRate = model.UnitRate;
                vm.Quantity = model.Quantity;
                vm.Amount = model.Amount;
                vm.EquipmentStatusID = model.EquipmentStatusID;
                vm.CreatedBy = model.CreatedBy;
            }
            else
            {


            }
            ViewBag.ProductFamily = db.ProductFamilies.OrderBy(cc => cc.ProductFamilyName).ToList();
            ViewBag.EquipmentStatus = db.EquipmentStatus.OrderBy(cc => cc.EquipmentStatus).ToList();
            ViewBag.Brand = db.Brands.OrderBy(cc => cc.BrandName).ToList();
            return PartialView("EquipmentEntry", vm);
        }

        [HttpPost]
        public ActionResult ListEquipment(int id)
        {
            EnquiryVM vm = new EnquiryVM();
            List<EnquiryEquipmentVM> List = new List<EnquiryEquipmentVM>();
            List = EnquiryDAO.EnquiryEquipment(id);
            vm.EquipmentDetails = List;
            return PartialView("EquipmentList", vm);
        }

        [HttpPost]
        public JsonResult SaveEquipment(EnquiryEquipmentVM data)
        {

            int fyearid = Convert.ToInt32(Session["fyearid"].ToString());
            int UserID = Convert.ToInt32(Session["UserID"].ToString());
            string UserName = Session["UserName"].ToString();
            Equipment model = new Equipment();
            if (data.ID == 0)
            {
                model = new Equipment();
            }
            else
            {
                model = db.Equipments.Find(data.ID);
            }
            model.ProductFamilyID = data.ProductFamilyID;
            model.EquipmentTypeID = data.EquipmentTypeID;
            model.EquipmentName = data.EquipmentName;
            model.Brand = data.Brand;
            model.Model = "";
            model.BrandID = data.BrandID;
            model.Quantity = data.Quantity;
            model.UnitRate = data.UnitRate;
            model.Amount = data.Amount;
            model.EquipmentStatusID = data.EquipmentStatusID;
            if (data.ID == 0)
            {
                model.CreatedUserID = UserID;
                model.CreatedBy = UserName;
                model.CreatedDate = CommonFunctions.GetBranchDateTime();
                //model.QuotedBY = "";
                model.ModifiedBy = UserName;
                model.ModifiedDate = CommonFunctions.GetBranchDateTime();
                model.EnquiryID = data.EnquiryID;
                model.CreatedDate = CommonFunctions.GetCurrentDateTime();
                db.Equipments.Add(model);
                db.SaveChanges();
                GeneralDAO.SaveAuditLog("Equipment Added", data.EnquiryNo, "Enquiry");
                return Json(new { status = "OK", message = "Equipment Added Succesfully!" });
            }
            else
            {
                model.ModifiedDate = CommonFunctions.GetCurrentDateTime();
                model.ModifiedBy = UserName;
                db.Entry(model).State = System.Data.Entity.EntityState.Modified;
                db.SaveChanges();
                return Json(new { status = "OK", message = "Equipment updated Succesfully!" });
            }



        }

        [HttpPost]
        public ActionResult DeleteEquipment(int EquipmentID, int EnquiryID)
        {
            int fyearid = Convert.ToInt32(Session["fyearid"].ToString());

            var _Estimation = db.EstimationDetails.Where(cc => cc.EquipmentID == EquipmentID).FirstOrDefault();
            if (_Estimation == null)
            {
                Equipment obj = db.Equipments.Find(EquipmentID);
                db.Equipments.Remove(obj);
                db.SaveChanges();
                EnquiryVM vm = new EnquiryVM();
                List<EnquiryEquipmentVM> List = new List<EnquiryEquipmentVM>();
                List = EnquiryDAO.EnquiryEquipment(EnquiryID);
                vm.EquipmentDetails = List;
                vm.Status = "OK";
                return PartialView("EquipmentList", vm);
            }
            else
            {
                EnquiryVM vm = new EnquiryVM();
                List<EnquiryEquipmentVM> List = new List<EnquiryEquipmentVM>();
                List = EnquiryDAO.EnquiryEquipment(EnquiryID);
                vm.EquipmentDetails = List;
                vm.Status = "Failed";
                return PartialView("EquipmentList", vm);
            }
        }



        [HttpGet]
        public JsonResult GetEquipmentType(string term, int BrandID)
        {
            int branchid = Convert.ToInt32(Session["CurrentBranchID"].ToString());
            var list = EnquiryDAO.GetEquipmentType(BrandID);
            if (term == null)
                term = "";
            if (term.Trim() != "")
            {
                list = list.Where(cc => cc.EquipmentType.Trim().ToLower().StartsWith(term.ToLower().Trim())).ToList();

                //var list = (from c1 in db.EquipmentTypes
                //                     join d1 in db.ProductFamilies on c1.ProductFamilyID equals
                //                    d1.ID
                //                    where c1.EquipmentType1.StartsWith(term.ToLower())
                //                    && c1.BrandID==BrandID
                //                    orderby c1.EquipmentType1                                 
                //                    ascending
                //                    select new { ID = c1.ID, EquipmentTypeName = c1.EquipmentType1,ProductFamilyID=d1.ID, ProductFamilyName=d1.ProductFamilyName }).ToList();

                return Json(list, JsonRequestBehavior.AllowGet);

            }
            else
            {

                //var customerlist = (from c1 in db.EquipmentTypes
                //                    join d1 in db.ProductFamilies on c1.ProductFamilyID equals
                //                    d1.ID
                //                    where c1.BrandID == BrandID
                //                    orderby c1.EquipmentType1
                //                  ascending
                //                    select new { ID = c1.ID, EquipmentTypeName = c1.EquipmentType1, ProductFamilyID = d1.ID, ProductFamilyName = d1.ProductFamilyName }).ToList();

                return Json(list, JsonRequestBehavior.AllowGet);

            }




        }

        [HttpGet]
        public JsonResult GetBrand(string term)
        {
            int branchid = Convert.ToInt32(Session["CurrentBranchID"].ToString());

            if (term.Trim() != "")
            {

                var list = (from c1 in db.Brands
                            where c1.BrandName.StartsWith(term.ToLower())

                            orderby c1.BrandName
                            ascending
                            select new { ID = c1.BrandID, BrandName = c1.BrandName }).ToList();

                return Json(list, JsonRequestBehavior.AllowGet);

            }
            else
            {

                var list = (from c1 in db.Brands

                            orderby c1.BrandName
                        ascending
                            select new { ID = c1.BrandID, BrandName = c1.BrandName }).ToList();

                return Json(list, JsonRequestBehavior.AllowGet);

            }




        }
        [HttpGet]
        public JsonResult GetProductFamily(int EquipmentTypeID)
        {
            int branchid = Convert.ToInt32(Session["CurrentBranchID"].ToString());
                        
            var list = db.EquipmentTypes.Find(EquipmentTypeID);
            var brand = db.BranchMasters.Find(list.BrandID);
            var _ProductFamilyName = "";
            if (list != null)
            {
                if (list.ProductFamilyID != null)
                {
                    _ProductFamilyName = db.ProductFamilies.Find(Convert.ToInt32(list.ProductFamilyID)).ProductFamilyName;
                }
                return Json(new { ProductFamilyID = list.ProductFamilyID, ProductFamilyName = _ProductFamilyName, BrandName = brand.BranchName }, JsonRequestBehavior.AllowGet); ;
            }
            else
            {
                return Json(new { ProductFamilyID = 0, ProductFamilyName = _ProductFamilyName, BrandName = brand.BranchName }, JsonRequestBehavior.AllowGet);
            }

        }

        [HttpGet]
        public JsonResult GetModel(string term)
        {
            int branchid = Convert.ToInt32(Session["CurrentBranchID"].ToString());

            if (term.Trim() != "")
            {

                var list = (from c1 in db.Models
                            where c1.ModelName.StartsWith(term.ToLower())

                            orderby c1.ModelName
                            ascending
                            select new { ID = c1.ModelID, ModelName = c1.ModelName }).ToList();

                return Json(list, JsonRequestBehavior.AllowGet);

            }
            else
            {

                var list = (from c1 in db.Models

                            orderby c1.ModelName
                              ascending
                            select new { ID = c1.ModelID, ModelName = c1.ModelName }).ToList();

                return Json(list, JsonRequestBehavior.AllowGet);

            }




        }



        [HttpGet]
        public JsonResult GetProjectPrefix(string term)
        {
            int branchid = Convert.ToInt32(Session["CurrentBranchID"].ToString());

            if (term.Trim() != "")
            {

                var list = (from c1 in db.ProjectPrefixes
                            where c1.ProjectPrefix1.StartsWith(term.ToLower())

                            orderby c1.ProjectPrefix1
                            ascending
                            select new { ID = c1.ID, ProjectfixName = c1.ProjectPrefix1 }).ToList();

                return Json(list, JsonRequestBehavior.AllowGet);

            }
            else
            {

                var list = (from c1 in db.ProjectPrefixes

                            orderby c1.ProjectPrefix1
                               ascending
                            select new { ID = c1.ID, ProjectfixName = c1.ProjectPrefix1 }).ToList();

                return Json(list, JsonRequestBehavior.AllowGet);

            }




        }


        public ActionResult GotoEstimation(string EnquiryNo)
        {
            EstimationSearch _search = new EstimationSearch();
            DateTime pFromDate;
            DateTime pToDate;

            pFromDate = CommonFunctions.GetFirstDayofMonth().Date;
            pToDate = CommonFunctions.GetLastDayofMonth().Date;

            _search.FromDate = pFromDate;
            _search.ToDate = pToDate;
            _search.EnquiryNo = EnquiryNo;

            Session["EstimationSearch"] = _search;
            return RedirectToAction("Index", "Estimation");

        }
        public JsonResult GetProjectNo(string term)
        {
            int fyearid = Convert.ToInt32(Session["fyearid"].ToString());
            int branchId = Convert.ToInt32(Session["CurrentBranchID"].ToString());
            int userid = Convert.ToInt32(Session["UserID"].ToString());
            var useremployee = db.EmployeeMasters.Where(cc => cc.UserID == userid).FirstOrDefault();
            var list = EnquiryDAO.GetProjectNo(term, useremployee.EmployeeID, branchId, fyearid);
            return Json(list, JsonRequestBehavior.AllowGet);

        }

        public ActionResult GotoQuotation(string EnquiryNo)
        {
            QuotationSearch _search = new QuotationSearch();

            DateTime pFromDate;
            DateTime pToDate;

            pFromDate = CommonFunctions.GetFirstDayofMonth().Date;
            pToDate = CommonFunctions.GetLastDayofMonth().Date;

            _search.FromDate = pFromDate;
            _search.ToDate = pToDate;
            _search.EnquiryNo = EnquiryNo;

            Session["QuotationSearch"] = _search;
            return RedirectToAction("Index", "Quotation");

        }
        #endregion


        #region checkcitycountry

        public int CheckCountryName(string CountryName)
        {

            var _country = db.CountryMasters.Where(cc => cc.CountryName.ToLower().Trim() == CountryName.Trim()).FirstOrDefault();
            if (_country == null)
            {
                CountryMaster _country1 = new CountryMaster();
                _country1.CountryName = CountryName;
                db.CountryMasters.Add(_country1);
                db.SaveChanges(); ;
                return _country1.CountryID;
            }
            else
            {
                return _country.CountryID;
            }

        }


        public int CheckCityName(string CityName, int CountryId)
        {

            var _city = db.CityMasters.Where(cc => cc.City.ToLower().Trim() == CityName.Trim().ToLower() && cc.CountryID == CountryId).FirstOrDefault();
            if (_city == null)
            {
                CityMaster _city1 = new CityMaster();
                _city1.City = CityName;
                db.CityMasters.Add(_city1);
                db.SaveChanges(); ;
                return _city1.CityID;
            }
            else
            {
                return _city.CityID;
            }

        }
        #endregion


        #region logentry
        [HttpPost]
        public ActionResult ShowLogList(string EnquiryNo)
        {
            EnquiryVM vm = new EnquiryVM();
            vm.AuditLogDetails = EnquiryDAO.EnquiryLog(EnquiryNo);
            return PartialView("AuditLogList", vm);
        }
        #endregion

        #region quotation
        [HttpPost]
        public ActionResult ShowEmployeeQuotation(int EnquiryID,int EmployeeID)
        {
            EnquiryVM vm = new EnquiryVM();
            var QuotationDetails = EnquiryDAO.EnquiryQuotation(EnquiryID);
            var detail = QuotationDetails.Where(cc => cc.QuotationStatus == "Secured" && cc.EngineerID == EmployeeID).ToList();
            vm.QuotationDetails = detail;
            return PartialView("QuotationList", vm);
        }

        #endregion

        public ActionResult PrintPreview(int Id)
        {
            var model = EnquiryDAO.GetEnquiryPrintData(Id);
            return View("Print", model);
        }
        public ActionResult PrintPdf(int Id)
        {
            var model = EnquiryDAO.GetEnquiryPrintData(Id);

            //  var model = GetSamplePurchaseOrder();
            return new ViewAsPdf("Print", model)
            {
                FileName = "Enquiry_" + model.EnquiryNo + ".pdf",
                PageSize = Rotativa.Options.Size.A4,
                PageOrientation = Rotativa.Options.Orientation.Portrait,
                PageMargins = new Rotativa.Options.Margins(10, 10, 10, 10)
            };
        }
        public ActionResult Print(int id)
        {
            int branchid = Convert.ToInt32(Session["CurrentBranchID"].ToString());
            int yearid = Convert.ToInt32(Session["fyearid"].ToString());
            int userid = Convert.ToInt32(Session["UserID"].ToString());

            string usertype = Session["UserType"].ToString();
            int RoleID = Convert.ToInt32(Session["UserRoleID"].ToString());
            int employeeId = 0;
            var useremployee = db.EmployeeMasters.Where(cc => cc.UserID == userid).FirstOrDefault();
            employeeId = useremployee.EmployeeID;
            string title = "Enquiry";

            var lst = EnquiryDAO.GetEnquiryPrintData(id);
            string companyaddress = SourceMastersModel.GetCompanyAddress(branchid);
            string companyname = SourceMastersModel.GetCompanyname(branchid);
            string companylocation = SourceMastersModel.GetCompanyLocation(branchid);
            string userdetail = "printed by " + SourceMastersModel.GetUserFullName(userid, usertype) + " on " + CommonFunctions.GetCurrentDateTime();
            lst.CompanyLogoUrl = "/images/logo.png";
            lst.CompanyName = companyname;
            lst.CompanyAddressLine1 = companylocation;
            // lst.CompanyAddressLine2 = companylocation;
            lst.GeneratedBy = SourceMastersModel.GetUserFullName(userid, usertype);
            lst.PreparedByName = "Engineer Ahmed";
            lst.PreparedOn = DateTime.Today;
            lst.ReviewedByName = "Manager Fatima";
            lst.ReviewedOn = DateTime.Today.AddDays(1);
            lst.ApprovedByName = "Director Khalid";
            lst.ApprovedOn = DateTime.Today.AddDays(2);

            var vm = new EnquiryPrintVM
            {
                CompanyLogoUrl = "/images/logo.png",
                CompanyName = "HVAC Solutions LLC",
                CompanyAddressLine1 = "123 Business Street",
                CompanyAddressLine2 = "Muscat, Oman",
                GeneratedBy = "Admin User",

                //   Enquiry = model,
                //  EnquiryEquipmentVMs = lst,
                EnquiryNo = "ENQ-2025-001",
                EnquiryDate = DateTime.Today,
                DueDate = DateTime.Today.AddDays(10),
                DueDays = 10,
                EnquiryStage = "Open",
                Prefix = "ENQ",

                ProjectName = "New Office Tower HVAC Installation",
                ProjectDetails = "Complete HVAC solution for 15-floor commercial tower.",
                EntityTypes = new List<string> { "Consultant", "Contractor" },
                ProjectLocation = "Muscat, Oman",
                AssignedToNames = new List<string> { "John Smith", "Aisha Ali" },

                Items = new List<EnquiryItemVM>
                {
                    new EnquiryItemVM {
                        EquipmentType = "Chiller",
                        EquipmentName = "York Chiller",
                        Model = "YVAA-300",
                        Description = "300 TR Air-Cooled Screw Chiller",
                        Qty = 2,
                        Unit = "Nos",
                        UnitPrice = 25000m
                    },
                    new EnquiryItemVM {
                        EquipmentType = "Pump",
                        EquipmentName = "Grundfos Pump",
                        Model = "TP-200",
                        Description = "Centrifugal Pump for chilled water",
                        Qty = 4,
                        Unit = "Nos",
                        UnitPrice = 1500m
                    }
                },
                EstimatedTotal = 2 * 25000m + 4 * 1500m,
                ItemNotes = "Prices are indicative only and subject to detailed BOQ.",

                CommercialNotes = "Payment terms: 30% advance, 70% upon delivery.",
                TechnicalNotes = "All equipment must comply with ASHRAE standards.",

                Attachments = new List<AttachmentVM>
                {
                    new AttachmentVM { FileName = "Specs.pdf", Remarks = "Technical specifications" },
                    new AttachmentVM { FileName = "Drawing.dwg", Remarks = "Project layout drawing" }
                },

                PreparedByName = "Engineer Ahmed",
                PreparedOn = DateTime.Today,
                ReviewedByName = "Manager Fatima",
                ReviewedOn = DateTime.Today.AddDays(1),
                ApprovedByName = "Director Khalid",
                ApprovedOn = DateTime.Today.AddDays(2)
            };
            return new ViewAsPdf("EnquiryPrint", lst)
            {
                FileName = $"Enquiry_{vm.EnquiryNo}.pdf",
                PageSize = Rotativa.Options.Size.A4,
                PageMargins = new Rotativa.Options.Margins(12, 12, 15, 12)
            };
            // return File(pdfBytes, "application/pdf", "EnquiryList.pdf");

        }
    }


}
@model HVAC.Models.EquipmentType
@{

    ViewBag.pTitle = "Product Type";
    ViewBag.pageTitle = "Setup";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script>

    function SaveProductType() {
        debugger;
        var id = 0;
        if ($('#ID').val() > 0) {
            id = $('#ID').val();

        }
        var protypeobj = {
            ID: id,
            EquipmentType1: $('#EquipmentType1').val(),
            BrandID: $('#BrandID').val(),
            ProductFamilyID: $('#ProductFamilyID').val()

        }
        debugger;
        $.ajax({
            type: "POST",
            url: '/ProductType/SaveProductType/',
            datatype: "html",
            data: { ProType: protypeobj },
            success: function (response) {
                if (response.status == "OK") {
                    Swal.fire("Save Status!", response.message, "success");
                    setTimeout(function () {
                        window.location.href = "/ProductType/Index";
                    }, 100)


                }
                else {
                    Swal.fire("Save Status!", response.message, "warning");
                }


            }
        });
    }

    function CheckProjectTypeExist(type, id, callback) {


        $.ajax({
            type: "Get",
            url: '/ProductType/ProductTypeExist',
            datatype: "Json",
            data: {
                PType: type,
                ID: id
            },

            success: function (data) {

                if (data == "true") {

                    callback(true);
                }
                else {
                    callback(false);
                }

            }
        });


    }


</script>

<script>
    (function () {
        "use strict";
        window.addEventListener(
            "load",
            function () {
                var t = document.getElementsByClassName("needs-validation");
                Array.prototype.filter.call(t, function (e) {
                    e.addEventListener(
                        "submit",
                        function (t) {

                            if (false === e.checkValidity()) {
                                e.classList.add("was-validated");
                            }
                            else {
                                t.preventDefault();
                                t.stopPropagation();
                                e.classList.remove("was-validated");

                                SaveProductType();

                            }
                        },
                        !1
                    );
                });
            },
            !1
        );
    })(),
        $(document).ready(function () {

           
        });

  

</script>


@using (Html.BeginForm("Create", "ProductType", FormMethod.Post, new { enctype = "multipart/form-data", @class = "needs-validation ", @novalidate = "novalidate" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <div id="alert" style="color:red;margin-left:7px;display:none">* Please fill mandatory fields</div>
        <div class="card">
            <div class="card-body">
                <div class="row">

                    <div class="col-md-3">
                        <div class="mb-2">
                            @Html.HiddenFor(model => model.ID)
                            <label class="col-form-label">Brand</label>
                            @Html.DropDownListFor(model => model.BrandID, new SelectList(@ViewBag.Brand, "BrandID", "BrandName"), "Select", new { @class = "form-select", @required = "required" })
                            @Html.ValidationMessageFor(model => model.BrandID)

                            <div class="invalid-feedback">
                                Please select Brand
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="mb-2">

                            <label class="col-form-label">Product Type</label>
                            @Html.TextBoxFor(mode => mode.EquipmentType1, new { @class = "form-control", @required = "required" })
                            @Html.ValidationMessageFor(model => model.EquipmentType1)

                        <div class="invalid-feedback">
                            Please Product  Type
                        </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="mb-2">
                         
                            <label class="col-form-label">Product Family</label>
                            @Html.DropDownListFor(model => model.ProductFamilyID, new SelectList(@ViewBag.ProductFamily, "ID", "ProductFamilyName"), "Select", new { @class = "form-select" })
                            @Html.ValidationMessageFor(model => model.BrandID)

                        <div class="invalid-feedback">
                            Please Product Family
                        </div>
                        </div>
                    </div>


                    <div class="col-md-12 text-md-end">
                        <input type="submit" value="Save" class="btn btn-success" id="btnsave" />



                        <a href='@Url.Action("Index", "ProductType")' class="btn btn-secondary">Cancel</a>

                    </div>
                </div>
            </div>
        </div>
    </fieldset>


}

@model HVAC.Models.MenuVM

@{
    ViewBag.Title = "Create";
    ViewBag.pTitle = "Menu Creation";
    ViewBag.pageTitle = "Menu Creation";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript">
    $(document).ready(function () {

        $(".parent").find('ul').css('display', 'none');
        $("ul").css('list-style-type', 'disc');

        $("#Title").focus();
        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });


        $("a.menutrv").click(function () {
            $("a.menutrv").removeClass("selected");
            $("#ParentID").val($(this).attr('itemid'));
            $(this).addClass("selected");


        });

        $('.parent').click(function () {

            $(this).find('ul').slideToggle();
        });


        //$("#btnsave").click(function () {
        //    alert("hii");
        //    $.ajax(
        //     {

        //         type: "POST", //HTTP POST Method  
        //         dataType: "json",
        //         contentType: "application/json; charset=utf-8",
        //           url: "MenuCreation/Create",  
        //           data: "{'Title':'" + $("#Title").val() + "','ParentID': '" + $("#parenthidden").val() + "'}",
        //           success: function (result) {
        //               alert("Success");

        //           }


        //     });

        //    return false;
        //});


        $("#btnsave").click(function () {
            var title = $("#Title").val();




            if (title == "") {
                $("#alert").show();
                return false;
            }


            else {
                $("#alert").hide();
                return true;
            }


        });



    });
</script>

<style>
    .selected {
        display: block;
        background-color: #556ee6;
        color: #fff !important;
    }
    .parent a{
        color: black;
    }
    .parent{
        padding: 5px;
        cursor: pointer;
    }
    .menutrv{
        height: 31px;
        padding-left: 10px;
        border-radius: 5px;
        padding-top: 6px;
    }
</style>
    <div class="card">
        <div class="card-body">

    @using (Html.BeginForm())
    {
        @Html.ValidationSummary(true)
        <div id="alert" style="color: red; display: none; margin-left: 10px;">*Please fill mandatory fields</div>
        <fieldset>
            <div class="row no-margin">
                <div class="col-md-3">
                    <label class="required headinglabel">Menu Title</label>
                    @Html.TextBoxFor(model => model.Title, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.Title)
                    <span id="parentmenu"></span>
                    @Html.HiddenFor(model => model.ParentID)
                </div>
                <div class="col-md-3">
                    <label class="headinglabel">Navigation Link</label>
                    @Html.TextBoxFor(model => model.Link, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Link)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel">Order</label>
                    @Html.TextBoxFor(model => model.MenuOrder, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MenuOrder)
                </div>
                
                <div class="col-md-3 text-md-end btn_top">
                    <input type="submit" value="Save" class="btn btn-success" id="btnsave" />
                    <a href='@Url.Action("Index", "MenuCreation", new { id = 0 })' class="btn btn-secondary">Cancel</a>
                </div>
          
            </div>

            <div class="row no-margin mt-4">
               
               <div class="col-md-3">
                   <label class="headinglabel">Parent</label>
                   <ul class="treeview-menu mt-4">


                       @{
        List<HVAC.Models.Menu> menuList = (List<HVAC.Models.Menu>)Session["Menu"];
        List<HVAC.Models.Menu> parentMenu = new List<HVAC.Models.Menu>();
        if (menuList != null)
        {

            parentMenu = menuList.Where(p => Convert.ToInt32(p.ParentID) == 0).ToList();
        }
                           <ul>
                               @if (parentMenu != null)
                               {


                                   foreach (var item in parentMenu)
                                   {
                                   <li class="parent"><a itemid=@item.MenuID  style="" class="menutrv">@item.Title</a>
                                       @if (menuList.Count(p => p.ParentID == item.MenuID) > 0)
                                       {
                                           @:<ul>

                                       }
                                       @RenderMenuList(menuList, item)
                             @if (menuList.Count(p => p.ParentID == item.MenuID) > 0)
                             {
                              @:</ul>
                                                                                                                                                                                                                                                       
                             }
                                   </li>
                            
                                   }
                               }
                           </ul>
                           @helper RenderMenuList(List<HVAC.Models.Menu> menuList, HVAC.Models.Menu mi)
{
    foreach (var item1 in menuList.Where(p => p.ParentID == mi.MenuID))
    {
                               @:<li class="parent">
<a itemid=
@item1.MenuID style=""  class="menutrv">@item1.Title</a>
        if (menuList.Count(p => p.ParentID == item1.MenuID) > 0)
        {
                               @:<ul>
                                           }
                               @RenderMenuList(menuList, item1)
        if (menuList.Count(p => p.ParentID == item1.MenuID) > 0)
        {
                               @:</ul>
                                           }
        else
        {
                               @:</li>   
                                           }
    }
                           }
                                   
                       }

                   </ul>
               </div>
                <div class="col-md-3 checkboxdesign" style="padding-top:15px">

                    @Html.CheckBox("PermissionRequired", new { @name = "PermissionRequired" }) &nbsp
                    <label class="headinglabel">Permission Required</label>
                </div>

                <div class="col-md-3 checkboxdesign" style="padding-top:15px">
                     @Html.CheckBox("Active", new { @name = "Active" }) &nbsp
                    <label class="headinglabel">Is Active</label>
                </div>
		 <div class="col-md-3 checkboxdesign" style="padding-top:15px">
                   
                    @Html.CheckBox("IsAccountMenu", new {@name = "IsAccountMenu" })&nbsp; <label class="headinglabel">Is Account Menu</label>
                      @Html.ValidationMessageFor(model => model.IsAccountMenu)
                </div>
            </div>

            
          
        </fieldset>
    }

</div>
</div>
